// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package goraft is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Log
	AppendResp
	Vote
	VoteResp
*/
package goraft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Log struct {
	CurrTerm uint32 `protobuf:"varint,1,opt,name=currTerm" json:"currTerm,omitempty"`
	Log      []byte `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AppendResp struct {
	Resp int32 `protobuf:"varint,1,opt,name=resp" json:"resp,omitempty"`
}

func (m *AppendResp) Reset()                    { *m = AppendResp{} }
func (m *AppendResp) String() string            { return proto.CompactTextString(m) }
func (*AppendResp) ProtoMessage()               {}
func (*AppendResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Vote struct {
	CurrTerm uint32 `protobuf:"varint,1,opt,name=currTerm" json:"currTerm,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type VoteResp struct {
	Resp int32 `protobuf:"varint,1,opt,name=resp" json:"resp,omitempty"`
}

func (m *VoteResp) Reset()                    { *m = VoteResp{} }
func (m *VoteResp) String() string            { return proto.CompactTextString(m) }
func (*VoteResp) ProtoMessage()               {}
func (*VoteResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Log)(nil), "goraft.Log")
	proto.RegisterType((*AppendResp)(nil), "goraft.AppendResp")
	proto.RegisterType((*Vote)(nil), "goraft.Vote")
	proto.RegisterType((*VoteResp)(nil), "goraft.VoteResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for PPCServer service

type PPCServerClient interface {
	AppendEntries(ctx context.Context, in *Log, opts ...grpc.CallOption) (*AppendResp, error)
	RequestVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*VoteResp, error)
}

type pPCServerClient struct {
	cc *grpc.ClientConn
}

func NewPPCServerClient(cc *grpc.ClientConn) PPCServerClient {
	return &pPCServerClient{cc}
}

func (c *pPCServerClient) AppendEntries(ctx context.Context, in *Log, opts ...grpc.CallOption) (*AppendResp, error) {
	out := new(AppendResp)
	err := grpc.Invoke(ctx, "/goraft.PPCServer/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pPCServerClient) RequestVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*VoteResp, error) {
	out := new(VoteResp)
	err := grpc.Invoke(ctx, "/goraft.PPCServer/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PPCServer service

type PPCServerServer interface {
	AppendEntries(context.Context, *Log) (*AppendResp, error)
	RequestVote(context.Context, *Vote) (*VoteResp, error)
}

func RegisterPPCServerServer(s *grpc.Server, srv PPCServerServer) {
	s.RegisterService(&_PPCServer_serviceDesc, srv)
}

func _PPCServer_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPCServerServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goraft.PPCServer/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPCServerServer).AppendEntries(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

func _PPCServer_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PPCServerServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goraft.PPCServer/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PPCServerServer).RequestVote(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

var _PPCServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goraft.PPCServer",
	HandlerType: (*PPCServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _PPCServer_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _PPCServer_RequestVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4b, 0x87, 0x40,
	0x10, 0xc5, 0x33, 0x4d, 0x74, 0x54, 0x90, 0x39, 0x89, 0x87, 0x90, 0x3d, 0x79, 0x32, 0xd0, 0x4f,
	0x10, 0xd1, 0xcd, 0x83, 0x6c, 0xd1, 0xbd, 0x6c, 0x5a, 0x82, 0x72, 0xb7, 0xd9, 0xb5, 0xcf, 0x1f,
	0xae, 0x58, 0x5d, 0xfe, 0xff, 0xdb, 0xfb, 0xc1, 0x7b, 0x6f, 0xdf, 0x0e, 0xa4, 0x6c, 0xe6, 0xce,
	0xb0, 0x76, 0x1a, 0x63, 0xa5, 0xf9, 0xf9, 0xcd, 0x89, 0x01, 0xc2, 0x51, 0x2b, 0xac, 0x21, 0x99,
	0x57, 0xe6, 0x47, 0xe2, 0xcf, 0x2a, 0x68, 0x82, 0xb6, 0x90, 0xbf, 0x8c, 0x25, 0x84, 0x1f, 0x5a,
	0x55, 0x97, 0x4d, 0xd0, 0xe6, 0x72, 0x93, 0xa2, 0x01, 0xb8, 0x35, 0x86, 0x96, 0x57, 0x49, 0xd6,
	0x20, 0x42, 0xc4, 0x64, 0x8d, 0xcf, 0x5d, 0x49, 0xaf, 0x85, 0x80, 0xe8, 0x49, 0x3b, 0x3a, 0xd7,
	0x2b, 0xae, 0x21, 0xd9, 0x3c, 0xa7, 0x3a, 0x7a, 0x03, 0xe9, 0x34, 0xdd, 0x3d, 0x10, 0x7f, 0x13,
	0x63, 0x0f, 0xc5, 0xfe, 0xe4, 0xfd, 0xe2, 0xf8, 0x9d, 0x2c, 0x66, 0xdd, 0xfe, 0x83, 0x6e, 0xd4,
	0xaa, 0xc6, 0x03, 0xfe, 0x66, 0x89, 0x0b, 0xbc, 0x81, 0x4c, 0xd2, 0xd7, 0x4a, 0xd6, 0xf9, 0x2d,
	0xf9, 0x61, 0xda, 0xa8, 0x2e, 0xff, 0xd3, 0x1e, 0x78, 0x89, 0xfd, 0x6d, 0x86, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x85, 0x05, 0x73, 0xf8, 0x28, 0x01, 0x00, 0x00,
}
