// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package goraft is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	LogEntry
	AERequest
	AEResp
	RVRequest
	RVResp
*/
package goraft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogEntry struct {
	Command []byte `protobuf:"bytes,1,opt,name=Command,json=command,proto3" json:"Command,omitempty"`
	Index   uint64 `protobuf:"varint,2,opt,name=Index,json=index" json:"Index,omitempty"`
	Term    uint32 `protobuf:"varint,3,opt,name=Term,json=term" json:"Term,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AERequest struct {
	LeaderID     string      `protobuf:"bytes,1,opt,name=LeaderID,json=leaderID" json:"LeaderID,omitempty"`
	Term         uint32      `protobuf:"varint,2,opt,name=Term,json=term" json:"Term,omitempty"`
	PrevLogTerm  uint32      `protobuf:"varint,3,opt,name=PrevLogTerm,json=prevLogTerm" json:"PrevLogTerm,omitempty"`
	PrevLogIndex uint64      `protobuf:"varint,4,opt,name=PrevLogIndex,json=prevLogIndex" json:"PrevLogIndex,omitempty"`
	LeaderCommit uint64      `protobuf:"varint,5,opt,name=LeaderCommit,json=leaderCommit" json:"LeaderCommit,omitempty"`
	Entries      []*LogEntry `protobuf:"bytes,6,rep,name=Entries,json=entries" json:"Entries,omitempty"`
}

func (m *AERequest) Reset()                    { *m = AERequest{} }
func (m *AERequest) String() string            { return proto.CompactTextString(m) }
func (*AERequest) ProtoMessage()               {}
func (*AERequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AERequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AEResp struct {
	Term    uint32 `protobuf:"varint,1,opt,name=Term,json=term" json:"Term,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *AEResp) Reset()                    { *m = AEResp{} }
func (m *AEResp) String() string            { return proto.CompactTextString(m) }
func (*AEResp) ProtoMessage()               {}
func (*AEResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RVRequest struct {
	CandidateID  string `protobuf:"bytes,1,opt,name=CandidateID,json=candidateID" json:"CandidateID,omitempty"`
	LastLogIndex uint64 `protobuf:"varint,2,opt,name=LastLogIndex,json=lastLogIndex" json:"LastLogIndex,omitempty"`
	LastLogTerm  uint32 `protobuf:"varint,3,opt,name=LastLogTerm,json=lastLogTerm" json:"LastLogTerm,omitempty"`
	Term         uint32 `protobuf:"varint,4,opt,name=Term,json=term" json:"Term,omitempty"`
}

func (m *RVRequest) Reset()                    { *m = RVRequest{} }
func (m *RVRequest) String() string            { return proto.CompactTextString(m) }
func (*RVRequest) ProtoMessage()               {}
func (*RVRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RVResp struct {
	Term        uint32 `protobuf:"varint,1,opt,name=Term,json=term" json:"Term,omitempty"`
	VoteGranted bool   `protobuf:"varint,2,opt,name=VoteGranted,json=voteGranted" json:"VoteGranted,omitempty"`
}

func (m *RVResp) Reset()                    { *m = RVResp{} }
func (m *RVResp) String() string            { return proto.CompactTextString(m) }
func (*RVResp) ProtoMessage()               {}
func (*RVResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*LogEntry)(nil), "goraft.LogEntry")
	proto.RegisterType((*AERequest)(nil), "goraft.AERequest")
	proto.RegisterType((*AEResp)(nil), "goraft.AEResp")
	proto.RegisterType((*RVRequest)(nil), "goraft.RVRequest")
	proto.RegisterType((*RVResp)(nil), "goraft.RVResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Raft service

type RaftClient interface {
	AppendEntries(ctx context.Context, in *AERequest, opts ...grpc.CallOption) (*AEResp, error)
	RequestVote(ctx context.Context, in *RVRequest, opts ...grpc.CallOption) (*RVResp, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) AppendEntries(ctx context.Context, in *AERequest, opts ...grpc.CallOption) (*AEResp, error) {
	out := new(AEResp)
	err := grpc.Invoke(ctx, "/goraft.Raft/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) RequestVote(ctx context.Context, in *RVRequest, opts ...grpc.CallOption) (*RVResp, error) {
	out := new(RVResp)
	err := grpc.Invoke(ctx, "/goraft.Raft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	AppendEntries(context.Context, *AERequest) (*AEResp, error)
	RequestVote(context.Context, *RVRequest) (*RVResp, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goraft.Raft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntries(ctx, req.(*AERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goraft.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*RVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goraft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _Raft_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0xbf, 0x6a, 0xf3, 0x30,
	0x14, 0xc5, 0xe3, 0xc4, 0xf1, 0x9f, 0xab, 0xe4, 0xe3, 0xab, 0xe8, 0x60, 0x32, 0x19, 0x4f, 0xa6,
	0x43, 0x86, 0xb4, 0x74, 0x2c, 0x84, 0x34, 0x94, 0x40, 0x28, 0x45, 0x2d, 0xd9, 0x55, 0x5b, 0x09,
	0x86, 0xd8, 0x56, 0x25, 0x25, 0xb4, 0x4f, 0xd0, 0xe7, 0xeb, 0x1b, 0x15, 0x59, 0x8e, 0xad, 0xa5,
	0xe3, 0x3d, 0x3e, 0x57, 0xfa, 0x9d, 0x23, 0x43, 0x28, 0x78, 0x36, 0xe7, 0xa2, 0x56, 0x35, 0xf6,
	0x0e, 0xb5, 0xa0, 0x7b, 0x95, 0x3c, 0x43, 0xb0, 0xad, 0x0f, 0xeb, 0x4a, 0x89, 0x2f, 0x1c, 0x81,
	0xbf, 0xaa, 0xcb, 0x92, 0x56, 0x79, 0xe4, 0xc4, 0x4e, 0x3a, 0x21, 0x7e, 0x66, 0x46, 0x7c, 0x0d,
	0xe3, 0x4d, 0x95, 0xb3, 0xcf, 0x68, 0x18, 0x3b, 0xa9, 0x4b, 0xc6, 0x85, 0x1e, 0x30, 0x06, 0xf7,
	0x8d, 0x89, 0x32, 0x1a, 0xc5, 0x4e, 0x3a, 0x25, 0xae, 0x62, 0xa2, 0x4c, 0x7e, 0x1c, 0x08, 0x97,
	0x6b, 0xc2, 0x3e, 0x4e, 0x4c, 0x2a, 0x3c, 0x83, 0x60, 0xcb, 0x68, 0xce, 0xc4, 0xe6, 0xb1, 0x39,
	0x32, 0x24, 0xc1, 0xb1, 0x9d, 0xbb, 0xed, 0x61, 0xbf, 0x8d, 0x63, 0x40, 0x2f, 0x82, 0x9d, 0xb7,
	0xf5, 0xc1, 0x3a, 0x18, 0xf1, 0x5e, 0xc2, 0x09, 0x4c, 0x5a, 0x87, 0x01, 0x72, 0x1b, 0xa0, 0x09,
	0xb7, 0x34, 0xed, 0x31, 0xb7, 0xea, 0x34, 0x85, 0x8a, 0xc6, 0xc6, 0x73, 0xb4, 0x34, 0x7c, 0x03,
	0xbe, 0x0e, 0x5d, 0x30, 0x19, 0x79, 0xf1, 0x28, 0x45, 0x8b, 0xff, 0x73, 0xd3, 0xc8, 0xfc, 0x52,
	0x07, 0xf1, 0x99, 0x31, 0x24, 0xf7, 0xe0, 0xe9, 0x48, 0x92, 0x77, 0xcc, 0x8e, 0xc5, 0x1c, 0x81,
	0xff, 0x7a, 0xca, 0x32, 0x26, 0x65, 0x13, 0x25, 0x20, 0xbe, 0x34, 0x63, 0xf2, 0xed, 0x40, 0x48,
	0x76, 0x97, 0x2e, 0x62, 0x40, 0x2b, 0x5a, 0xe5, 0x45, 0x4e, 0x15, 0xeb, 0xea, 0x40, 0x59, 0x2f,
	0x35, 0xdc, 0x54, 0xaa, 0x2e, 0xdb, 0xb0, 0xe5, 0xb6, 0x34, 0x7d, 0x4a, 0xeb, 0xb1, 0x1b, 0x3a,
	0xf6, 0x52, 0xc7, 0xe8, 0x5a, 0xaf, 0xf2, 0x00, 0x9e, 0x06, 0xf9, 0x23, 0x41, 0x0c, 0x68, 0x57,
	0x2b, 0xf6, 0x24, 0x68, 0xa5, 0x58, 0xde, 0xa6, 0x40, 0xe7, 0x5e, 0x5a, 0x70, 0x70, 0x09, 0xdd,
	0x2b, 0x7c, 0x07, 0xd3, 0x25, 0xe7, 0xac, 0xca, 0xdb, 0xee, 0xf0, 0xd5, 0xa5, 0xb5, 0xee, 0xcd,
	0x67, 0xff, 0x6c, 0x49, 0xf2, 0x64, 0x80, 0x17, 0x80, 0xda, 0x8f, 0xfa, 0x9a, 0x7e, 0xa7, 0xeb,
	0xa6, 0xdf, 0x31, 0x94, 0xc9, 0xe0, 0xdd, 0x6b, 0x7e, 0xd3, 0xdb, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xaf, 0xfd, 0x26, 0x0b, 0xb3, 0x02, 0x00, 0x00,
}
